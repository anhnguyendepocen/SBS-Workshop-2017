\documentclass{beamer}
\newenvironment{changemargin}[2]{%
\begin{list}{}{%
\setlength{\topsep}{0pt}%
\setlength{\leftmargin}{#1}%
\setlength{\rightmargin}{#2}%
\setlength{\listparindent}{\parindent}%
\setlength{\itemindent}{\parindent}%
\setlength{\parsep}{\parskip}%
}%
\item[]}{\end{list}}
\usepackage{graphicx}
\usepackage{amsmath}
\usepackage{url}
\usetheme{Madrid}
\usecolortheme{beaver}
\setbeamertemplate{navigation symbols}{}
\titlegraphic{\includegraphics[width=5cm]{..//..//S-DS-VC-RGB.png}}
%\logo{\includegraphics[width=0.1\textwidth,keepaspectratio]{..//..//UOACrest.png}}
\author[SCC]{Statistical Consulting Centre}%\\
\institute[\href{mailto:consulting@stat.auckland.ac.nz}
  {consulting@stat.auckland.ac.nz}]{\href{mailto:consulting@stat.auckland.ac.nz}
  {consulting@stat.auckland.ac.nz}\\
%Statistical Consulting Centre\\
The Department of Statistics\\
The University of Auckland}
\title[Session 4 -- Data Exploration]{NZSSN Courses: Introduction to \texttt{R}}
\subtitle{Session 4 -- Data Exploration}
\date{1 March, 2017}
\begin{document}
%\SweaveOpts{concordance=TRUE}
\maketitle

\begin{frame}[fragile]
  \frametitle{WHOQOL}
<<echo = F>>=
options(continue = " ")
opts_chunk$set(comment=NA)
thm = knit_theme$get("moe")  # parse the theme to a list
knit_theme$set(thm)
issp.df = read.csv("../../Data/issp.csv", stringsAsFactors = F)
gender.na <- which(issp.df$Gender == "NA, refused")
issp.df$Gender[gender.na] = NA
Q6.na <- which(issp.df$Q6 == "na, refused")
issp.df$Q6[Q6.na] = NA
issp.df$Q6 = factor(issp.df$Q6, levels = c("always wrong", "almost always wrong", "only sometimes wrong", "not wrong at all", "cant choose, dk"))
Q7.na <- which(issp.df$Q7 == "na, refused")
issp.df$Q7[Q7.na] <- NA
issp.df$Q7 = factor(issp.df$Q7, levels = c("always wrong", "almost always wrong", "only sometimes wrong", "not wrong at all", "cant choose, dk"))
Q8.na <- which(issp.df$Q8 == "na, refused")
issp.df$Q8[Q8.na] <- NA
issp.df$Q8 = factor(issp.df$Q8, levels = c("always wrong", "almost always wrong", "only sometimes wrong", "not wrong at all", "cant choose, dk"))
Q1.na <- which(issp.df$Q1 == "na, refused" | issp.df$Q1 == "can't choose, dk")
issp.df$Q1[Q1.na] <- NA
issp.df$Q1 = factor(issp.df$Q1, 
                    levels = c("strongly agree", 
                    "agree", "neither agree nor dis", 
                    "disagree", "strongly disagree"))
issp.df$age.group = ifelse(issp.df$Age<=35, "Under 35", 
                           ifelse(issp.df$Age <= 60, "36 to 60", "Over 61"))
issp.df$age.group = factor(issp.df$age.group, 
                           levels = c("Under 35", 
                                      "36 to 60", 
                                      "Over 61"))
issp.df$Q2 <- ifelse(issp.df$Q2 == "cant choose, dk" | issp.df$Q2 == "na, refused", NA, issp.df$Q2)
issp.df$Q2 = factor(issp.df$Q2, 
                    levels = c("strongly agree", 
                    "agree", "neither agree nor dis", 
                    "disagree", "strongly disagree"))

issp.df$Q3 <- ifelse(issp.df$Q3 == "cant choose, dk" | 
                     issp.df$Q3 == "na, refused", 
                     NA, issp.df$Q3)
issp.df$Q3 = factor(issp.df$Q3, 
                    levels = c("strongly agree", 
                    "agree", "neither agree nor dis", 
                    "disagree", "strongly disagree"))
issp.df$Q4 <- ifelse(issp.df$Q4 == "cant choose, dk" | 
                     issp.df$Q4 == "na, refused", 
                     NA, issp.df$Q4)
issp.df$Q4 = factor(issp.df$Q4, 
                    levels = c("strongly agree", 
                    "agree", "neither agree nor dis", 
                    "disagree", "strongly disagree"))
@
\begin{itemize}
\item Questionnaire usually comprise many items.
\item Sometimes we add the likert scale of a set of questions (from the same section) to obtain a score. Then we will assume it's a measure of a certain aspect.
\item For example, World Health Organisation Quality of Life (WHOQOL) measures. It develops three scores (physical score, psychosocial score and total generic score) from a large number of questions.
\item Suppose we add the likert scale from Q1 to Q4 to get a total score, and let's call it the "Feminist score"
\end{itemize}
\end{frame}

\begin{frame}[fragile]
\frametitle{First step}
Convert responses to Q1 -- Q4 to likert scale.\\
\vspace{2mm}
We can do this using nested \texttt{ifelse()} statements, e.g.
\vspace{-2mm}
<<tidy = F>>=
Q1.lik<- with(issp.df, 
            ifelse(Q1 == "strongly agree", 1,
            ifelse(Q1 == "agree", 2,
            ifelse(Q1 == "neither agree nor dis", 3,
            ifelse(Q1 == "disagree", 4, 
            ifelse(Q1 == "strongly disagree", 5, NA))))))
@
\vspace{-2mm}
<<results='hide'>>=
# Generate one-way frequency table for likert scale
table(Q1.lik)
@
\vspace{-7mm}
<<echo=FALSE>>=
table(Q1.lik)
@
\end{frame}

\begin{frame}[fragile]
\frametitle{Easier way}
Recall that \texttt{Q1} -- \texttt{Q4} are now s. We can check this using \texttt{R}'s \text{str}ucture function, i.e.
<<>>=
str(issp.df[, c("Q1", "Q2", "Q3", "Q4")])
@
We can look at the levels of \texttt{Q1}, e.g.,
\vspace{-2mm}
<<results='hide'>>=
levels(issp.df$Q1)
@
\vspace{-7mm}
<<echo=FALSE>>=
options(width = 60)
levels(issp.df$Q1)
@
\end{frame}

\begin{frame}[fragile]
\frametitle{\texttt{as.numeric()}}
Integer values assigned to levels of \texttt{Q1}: \texttt{strongly agree = 1}, \texttt{agree = 2}, ..., \texttt{strongly disagree = 5}. We defined this order using the \texttt{levels} argument in \texttt{factor}.\\
\vspace{2mm}
\texttt{as.numeric()} uses this \texttt{factor} property to convert \texttt{Q1} to type \texttt{numeric}. 
\vspace{-2mm}
<<results='hide'>>=
issp.df$Q1[1:10]
@
\vspace{-5mm}
<<echo = FALSE>>=
options(width = 50)
issp.df$Q1[1:10]
@
\vspace{-2mm}
<<results='hide'>>=
as.numeric(issp.df$Q1[1:10])
@
\vspace{-5mm}
<<echo = FALSE>>=
as.numeric(issp.df$Q1[1:10])
@
\end{frame}

\begin{frame}[fragile]
\frametitle{\texttt{as.numeric()}}
Items \texttt{Q1} -- \texttt{Q4} are on the theme of {\em household gender roles}. Let's convert the values in each variable to a 5-point likert scale.
<<>>=
Q1.lik <- as.numeric(issp.df$Q1)
table(Q1.lik)
Q2.lik <- as.numeric(issp.df$Q2)
Q3.lik <- as.numeric(issp.df$Q3)
Q4.lik <- as.numeric(issp.df$Q4)
@
\end{frame}

\begin{frame}[fragile]
\frametitle{Items on household gender roles: Total score}
<<>>=
total.lik <- Q1.lik + Q2.lik + Q3.lik + Q4.lik
summary(total.lik)
@
\end{frame}

\begin{frame}[fragile]
\frametitle{Constructing a \texttt{data.frame}}
Let's create a new dataset from \texttt{Q1.lik} -- \texttt{Q4.lik} and \texttt{total.lik} called \texttt{likert.df}.
<<>>=
likert.df <- data.frame(Q1.lik, Q2.lik, Q3.lik, Q4.lik,
                        total.lik)
head(likert.df)
@
\end{frame}

\begin{frame}[fragile]
\frametitle{Properties of \texttt{likert.df}}
What are its column names?
<<echo=FALSE>>=
options(width = 58)
@
\vspace{-2mm}
<<results='hide'>>=
names(likert.df)
@
\vspace{-5mm}
<<echo=FALSE>>=
names(likert.df)
@
\vspace{-2mm}
For data frames, \texttt{names()} yields {\em column} names. 
Let's now change them!\\
\vspace{-2mm}
<<results='hide'>>=
# Change only the last column's name to "Total"
names(likert.df)[5] <- "Total"
names(likert.df)
@
\vspace{-5mm}
<<echo=FALSE>>=
names(likert.df)
@
\vspace{-2mm}
<<results='hide'>>=
# Change all columns names
names(likert.df) <- c("Q1", "Q2", "Q3", "Q4", "Total")
@
\vspace{-5mm}
<<echo=FALSE>>=
names(likert.df)
@
\end{frame}

\begin{frame}[fragile]
\frametitle{Constructing a \texttt{data.frame}}
Let's create the column names we want during our construction of the data frame, i.e.
<<tidy=FALSE>>=
likert.df <- data.frame(Q1=Q1.lik, Q2=Q2.lik, 
                        Q3=Q3.lik, Q4=Q4.lik, 
                        Total=total.lik)
head(likert.df)
@
\end{frame}

\begin{frame}[fragile]
\frametitle{Properties of \texttt{likert.df}}
<<>>=
str(likert.df)
@
The \texttt{str{}} function tells us that \texttt{likert.df}:
\begin{enumerate}
  \item is a data frame, 
  \item comprises 1047 \texttt{obs.} (cases or rows) and 5 \texttt{variables} (columns), and 
  \item all 5 variables are \texttt{num}eric.
\end{enumerate}
\end{frame}

\begin{frame}[fragile]
\frametitle{\texttt{likert.df}: Column summary statistics}
I want to generate the summary statistics for all variables in \texttt{likert.df}.
<<echo = 2:3>>=
options(width = 80)
summary(likert.df$Q1)
summary(likert.df$Q2)
@
.\\
.\\
.\\
\end{frame}

\begin{frame}[fragile]
\frametitle{\texttt{for} loop to get column summary statistics}
<<echo = 2:3>>=
options(width = 80)
for (i in 1:ncol(likert.df)){
  print(summary(likert.df[,i]))
}
@
\end{frame}

\begin{frame}[fragile]
\frametitle{Smart way: \texttt(apply) to get column summary statistics}
<<>>=
apply(likert.df, 2, summary)
@
\end{frame}  

\begin{frame}[fragile]
  \frametitle{\texttt{apply}}
\begin{verbatim}
apply(X, MARGIN, FUN, ...)
\end{verbatim}
  \begin{itemize}
  \item \texttt{X}: A data frame, e.g. \texttt{issp.df}.
  \item \texttt{MARGIN}: 1 indicates rows, 2 indicates columns.
  \item \texttt{FUN}: function, what do you want \texttt{R} to do with
    the rows or columns of the data frame
  \item \texttt{...}: optional arguments to \texttt{FUN}.
  \end{itemize}
Translation: Do something (\texttt{FUN}) to every row (or column) (\texttt{MARGIN}) of a data
frame (\texttt{X}). 
\end{frame}


\begin{frame}[fragile]
\frametitle{\texttt{apply()}}
Compute the mean and standard deviation of each column in \texttt{likert.df}, ignoring \texttt{NA}s.
<<>>=
apply(likert.df, 2, mean, na.rm = TRUE)
apply(likert.df, 2, sd, na.rm = TRUE)
@
\end{frame}  

\begin{frame}[fragile]
\frametitle{\texttt{apply()} using self-defined \texttt{R} function}
Functions used in \texttt{apply()} can be self-defined.
<<>>=
na.check <- function(someinput){
 test.na <- is.na(someinput) 
 sum(test.na)
}
@
Take an educated guess at what \texttt{na.check()} does.
\end{frame}  

\begin{frame}[fragile]
\frametitle{\texttt{apply()} using a self-defined \texttt{R} function}
Let's look at what each row of \texttt{na.check()} does.
<<>>=
test1 <- issp.df$Age[1:10]
test1 
@
<<results='hide'>>=
test.na <- is.na(test1)
test.na
@
<<echo = 3>>=
options(width = 50)
test.na
sum(test.na)
@
\end{frame} 

\begin{frame}[fragile]
\frametitle{\texttt{apply()} using a self-defined \texttt{R} function}
Let's now use \texttt{na.check()} in \texttt{apply()}.
<<>>=
apply(likert.df, 2, na.check)
@
\vspace{4mm}
Attention programmers!
<<>>=
apply(likert.df, 2, function(x) sum(is.na(x)))
@
\end{frame} 


\begin{frame}[fragile]
\frametitle{A slightly more complicated function}
<<tidy = F>>=
mytab <- function(someinput){
 n <- length(someinput)
 n.missing <- na.check(someinput)
 n.complete <- n - n.missing
 mymean <- round(mean(someinput, na.rm = TRUE), 2)
 mysd <- round(sd(someinput, na.rm = TRUE), 2)
 mystder <- round(mysd/sqrt(n.complete), 2)
 Lower.CI <- round(mymean - 1.96*mystder, 2)
 Upper.CI <- round(mymean + 1.96*mystder, 2)
 c(Complete.obs = n.complete, Missing.obs = n.missing, 
   Mean = mymean, Std.Error = mystder, 
   Lower.CI = Lower.CI, Upper.CI = Upper.CI)
}
@
Take a \emph{more} educated guess at what \texttt{mytab()} does?
\end{frame}  

\begin{frame}[fragile]
\frametitle{A slightly more complicated function}
\begin{itemize}
  \item For the \texttt{R} novice, \texttt{mytab()} is possibly terrifying!
  \item We too were \texttt{R} novices once!
  \item Our advice on understanding what an \texttt{R} function does?\\[1em]
  \item[] \begin{center}
  ``Use a data set for input into the function and work through it one line of code at a time.''\\[1em]
  \end{center}
  \item We ``experts'' still do this!
\end{itemize}  
\end{frame}  

\begin{frame}[fragile]
\frametitle{\texttt{mytab()}}
<<echo = 2>>=
options(width = 80)
apply(likert.df, 2, mytab)
@
\end{frame} 


\begin{frame}[fragile]
\frametitle{More descriptive stats}
Calculate the mean total score for male and female respondents.
<<tidy = F>>=
issp.df$total.lik <- likert.df$Total
with(issp.df, mean(total.lik[Gender == "Male"], 
                   na.rm = TRUE))
with(issp.df, mean(total.lik[Gender == "Female"], 
                   na.rm = TRUE))
@
How about calculating the mean total score for each income group (10 levels)?
\end{frame} 

\begin{frame}[fragile]
\frametitle{Smart way}
<<tidy = F, echo = 2:5>>=
options(width = 50)
issp.df$Income <- ifelse(issp.df$Income 
                         == "NAV; NAP No own income",
                         NA, issp.df$Income)
with(issp.df, tapply(total.lik, Income, mean, na.rm = TRUE))
@
\end{frame} 

\begin{frame}[fragile]
\frametitle{\texttt{tapply()}}
<<eval = F>>=
with(issp.df, tapply(total.lik, Income, mean, na.rm = TRUE))
@
\begin{verbatim}
tapply(X, INDEX, FUN, ...)
\end{verbatim}
Translation: Apply function \texttt{FUN} to \texttt{X} for each level in the grouping factor \texttt{INDEX}
\end{frame}    

\begin{frame}[fragile]
\frametitle{\texttt{tapply()}}
<<echo=2>>=
options(width=60)
with(issp.df, tapply(total.lik, Gender, mytab))
@ 
\end{frame} 

\begin{frame}[fragile]
  \frametitle{Summary}
  \begin{itemize}
  \item Recoding
  \item Summary Stats
  \item \texttt{apply()}
  \item \texttt{tapply()}
  \end{itemize}
\end{frame}

\end{document}     
